{
  "version": 3,
  "sources": ["../../../../dom/util.ts"],
  "sourcesContent": ["// Const\n\nconst gbl = globalThis;\n\nconst Array = gbl.Array;\nconst DOMParser = gbl.DOMParser;\nconst JSON = gbl.JSON;\nconst Object = gbl.Object;\n\nexport const TRUE: true = !0;\nexport const FALSE: false = !TRUE;\nexport const NULL: null = null;\nexport const UNDEFINED: undefined = void 0;\n\nexport const doc = gbl.document;\nexport const Promise = gbl.Promise;\nexport const $ = gbl.Symbol;\nexport const win = gbl.window;\nexport const location = gbl.location;\n\nexport const routeLoadEvent = \"route-load\";\n\n// FP\n\nexport const call = <T>(cb: () => T): T => cb();\n\nexport const first = <T>(a: readonly [T, ...any[]]): T => a[0];\n\nexport const last = <T>(a: readonly T[]): T => a[length(a) - 1];\n\nexport const forEach = <\n  T extends Record<\"forEach\", (...item: readonly any[]) => any>,\n>(\n  iterable: T | null | undefined,\n  cb: T extends Record<\"forEach\", (cb: infer Cb) => void> ? Cb : never,\n): void => iterable?.forEach(cb);\n\nexport const forOf = <T>(\n  iterable: Iterable<T>,\n  cb: (item: T) => unknown,\n): void => {\n  for (let i of iterable) cb(i);\n};\n\nexport const reverseForOf = <T>(\n  iterable: Iterable<T>,\n  cb: (item: T) => unknown,\n): void => {\n  let arr = [...iterable], i = arr.length - 1;\n  for (; i >= 0; i--) cb(arr[i]);\n};\n\nexport const id = <T>(v: T): T => v;\n\nexport const isFunction = <T extends Function>(v: unknown): v is T =>\n  typeof v == \"function\";\n\nexport const isString = (v: unknown): v is string => typeof v === \"string\";\n\nexport const length = (lengthy: { length: number }) => lengthy.length;\n\nexport const memo1 = <Fn extends (arg: any) => any>(\n  fn: Fn,\n): Fn & { del: (a: Parameters<Fn>[0]) => boolean } => {\n  let cache = new WeakMap(),\n    m = ((arg) => (\n      !cache.has(arg) && cache.set(arg, fn(arg)), cache.get(arg)\n    )) as Fn & { del: (a: Parameters<Fn>[0]) => boolean };\n  m.del = (arg: Parameters<Fn>[0]) => cache.delete(arg);\n  return m;\n};\n\nexport const noop = (): void => {};\n\nexport const popR = <T>(arr: T[]): T[] => (arr.pop(), arr);\n\nexport const pushR = <T>(arr: T[], ...v: T[]): T[] => (arr.push(...v), arr);\n\nexport const toLowerCase = (str: string): string => str.toLowerCase();\n\nexport const isArray = Array.isArray;\n\nexport const arraySlice = Array.prototype.slice;\n\nexport const parse = JSON.parse;\n\nexport const assign = Object.assign;\nexport const defineProperties = Object.defineProperties;\nexport const entries = Object.entries;\nexport const freeze = Object.freeze;\nexport const fromEntries = Object.fromEntries;\nexport const getOwnPropertyDescriptors = Object.getOwnPropertyDescriptors;\nexport const keys = Object.keys;\nexport const values = Object.values;\n\n// DOM\n\nconst domParser = DOMParser && new DOMParser();\n\nexport const domParse = (html: string): Document =>\n  domParser.parseFromString(html, \"text/html\");\n\nexport const html = (\n  xml: string,\n): ChildNode[] => [...domParse(xml).body.childNodes];\n\nexport const adoptNode = <T extends Node>(node: T): T => doc.adoptNode(node);\n\nexport const cloneNode = <T extends Node>(node: T): T =>\n  node.cloneNode(TRUE) as T;\n\nexport const dataset = (el: HTMLElement | SVGElement): DOMStringMap =>\n  el.dataset;\n\nexport const dispatchPrevented = (el: EventTarget, event: Event): boolean => (\n  el.dispatchEvent(event), event.defaultPrevented\n);\n\nexport const ifDef = <T, U>(v: T, cb: (v: NonNullable<T>) => U): T | U =>\n  v == null ? (v as Exclude<T, NonNullable<T>>) : cb(v);\n\nexport const insertBefore = (\n  parent: Node,\n  node: Node,\n  child: Node | null,\n): Node => parent.insertBefore(node, child);\n\nexport const preventDefault = (e: Event): void => e.preventDefault();\n\nexport const querySelector = <E extends Element>(\n  selector: string,\n  node: ParentNode = doc.body,\n): E | null => node.querySelector<E>(selector);\n\nexport const querySelectorAll = <E extends Element>(\n  selector: string,\n  node: ParentNode = doc.body,\n): NodeListOf<E> => node.querySelectorAll<E>(selector);\n\nexport const remove = <Args extends readonly unknown[], R>(\n  el: { readonly remove: (...args: Args) => R },\n  ...args: Args\n): R => el.remove(...args);\n\nexport const replaceWith = (\n  el: ChildNode,\n  ...node: readonly (Node | string)[]\n): void => el.replaceWith(...node);\n\nexport const stopPropagation = (e: Event): void => e.stopPropagation();\n\ntype Deep<T> = T | readonly Deep<T>[];\n\nexport const deepMap = <T, R>(v: Deep<T>, cb: (v: T) => R): R[] =>\n  isArray(v) ? deepMap_(v, cb) as R[] : [cb(v as T)];\n\nconst deepMap_ = <T, R>(v: Deep<T>, cb: (v: T) => R): R | R[] =>\n  isArray(v) ? v.flatMap((v) => deepMap_(v, cb)) : cb(v as T);\n\nconst camelRegExp = /[A-Z]/g;\n\nexport const hyphenize = (camel: string): string =>\n  camel.replace(\n    camelRegExp,\n    (l: string) => \"-\" + l.toLowerCase(),\n  );\n\nexport const global = <T>(name: string, init: T): { (): T; (v: T): T } => {\n  let $accessor = $.for(name),\n    getSet = (...args: [] | [T]) =>\n      // @ts-ignore wrapped in this function to avoid overloading global types\n      length(args) ? gbl[$accessor] = args[0] : gbl[$accessor];\n\n  if (!($accessor in gbl)) getSet(init);\n\n  return getSet;\n};\n\nexport type EventType<T> =\n  & (undefined extends T ? { (detail?: T): CustomEvent<T> }\n    : { (detail: T): CustomEvent<T> })\n  & { readonly type: string };\n\nconst eventTypeIndex = global(\"cc.eti\", 0);\n\nexport const eventType = <T = undefined>(\n  { type, ...opts }: CustomEventInit<T> & { type?: string } = {},\n): EventType<T> => {\n  let t = type ?? \"cc\" + eventTypeIndex(eventTypeIndex() + 1),\n    factory: ((detail: T) => CustomEvent<T>) & { type?: string } = (\n      detail: T,\n    ) =>\n      new CustomEvent(t, { bubbles: TRUE, cancelable: TRUE, detail, ...opts });\n  factory.type = t;\n  return factory as EventType<T>;\n};\n\nexport const listen = <\n  T extends EventTarget,\n  K extends string | EventType<any>,\n>(\n  target: T,\n  event: K,\n  cb: (\n    this: T,\n    e: K extends EventType<infer ET> ? CustomEvent<ET>\n      : T extends Window\n        ? K extends keyof WindowEventMap ? WindowEventMap[K] : Event\n      : K extends keyof HTMLElementEventMap ? HTMLElementEventMap[K]\n      : Event,\n  ) => void,\n  options?: boolean | AddEventListenerOptions | undefined,\n): () => void => {\n  let type = isString(event) ? event : event.type;\n  target.addEventListener(\n    type,\n    cb as Parameters<typeof target[\"addEventListener\"]>[1],\n    options,\n  );\n  return () =>\n    target.removeEventListener(\n      type,\n      cb as Parameters<typeof target[\"removeEventListener\"]>[1],\n      options,\n    );\n};\n"],
  "mappings": "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",
  "names": ["gbl", "Array", "DOMParser", "JSON", "Object", "TRUE", "FALSE", "NULL", "UNDEFINED", "doc", "Promise", "$", "win", "location", "routeLoadEvent", "call", "cb", "first", "a", "last", "length", "forEach", "iterable", "forOf", "i", "reverseForOf", "arr", "id", "v", "isFunction", "isString", "lengthy", "memo1", "fn", "cache", "m", "arg", "noop", "popR", "pushR", "toLowerCase", "str", "isArray", "arraySlice", "parse", "assign", "defineProperties", "entries", "freeze", "fromEntries", "getOwnPropertyDescriptors", "keys", "values", "domParser", "domParse", "html", "xml", "adoptNode", "node", "cloneNode", "dataset", "el", "dispatchPrevented", "event", "ifDef", "insertBefore", "parent", "child", "preventDefault", "querySelector", "selector", "querySelectorAll", "remove", "args", "replaceWith", "stopPropagation", "deepMap", "deepMap_", "camelRegExp", "hyphenize", "camel", "l", "global", "name", "init", "$accessor", "getSet", "eventTypeIndex", "eventType", "type", "opts", "t", "factory", "detail", "listen", "target", "options"]
}
